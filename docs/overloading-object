# Overloading Object Proxy

A overloading object proxy is an extensible object. You can apply some new methods on the object during the building or at runtime.
The only one limitation is about the internal PHP class, only your object can be extended.

## What is an overloading proxy ?

The overloading object proxy generate a new object from an other object, but with additional methods that you have defined.
The proxy doesn't wrap the object, but it implements the object interfaces.
A "createProxyDocumentation" in the factory will let you to see the body of the new object available.

## Usage examples

```php
class Foo
{
    public $property = 'propertyDefault';

    public function bar()
    {
        return 'default';
    }
}

$factory = new OverloadingFactory();

// create proxy with some additional methods
$proxy = $factory->createProxy(new Foo(), array(
    'bar' => array(
        function($string) { return $string; },
        function(\stdClass $std) { return $std->string; }
    ),
    'property' => array(
        function($name) { return $this->$name; }
    ),
));

// be careful, methods adding in live is slower
$factory->createProxyMethods($proxy, array(
    'bar' => function($string, $otherString) { return $string . $otherString; },
));

echo $proxy->bar('foo'); // 'foo'
echo $proxy->bar('foo', 'bar'); // 'foobar'
echo $proxy->property('myPublicProperty'); // 'propertyDefault'

echo $factory->createProxyDocumentation($proxy); // print the extended class documentation
```

## Scope usage

If the proxy and the closure are created in a class, use $self instead of $this (during the proxy building) to avoid scope problem, 
and use your proxy instance when you add in live your methods :

```php
class MyClass()
{
    public function getProxy()
    {
        // create proxy with some additional methods
        $proxy = $factory->createProxy(new Foo(), array(
            'bar' => array(
                function($string) { return $string; },
                function(\stdClass $std) { return $std->string; }
            ),
            'property' => array(
                function($name) { return $self->$name; } // $self will be automatically created
            ),
        ));

        $factory->createProxyMethods($proxy, array(
            'publicProperty' => function() use ($proxy) { return $proxy->property; } // use $proxy, the current object
        ));
    }
}
```

## Tuning performance for production

See [Tuning ProxyManager for Production](https://github.com/Ocramius/ProxyManager/blob/master/docs/tuning-for-production.md).
